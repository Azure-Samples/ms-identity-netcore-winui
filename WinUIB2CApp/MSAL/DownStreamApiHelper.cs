using Microsoft.Extensions.Configuration;
using Microsoft.Identity.Client;
using System;
using System.Diagnostics;
using System.Net.Http.Headers;
using System.Threading.Tasks;

namespace WinUIMSALAppB2C.MSAL
{
    /// <summary>
    /// Contains methods to initialize and call your downstream API
    /// </summary>
    /// <autogeneratedoc />
    public class DownStreamApiHelper
    {
        private readonly DownStreamApiConfig _downStreamApiConfig;

        private MSALClientHelper _msalClient;

        /// <summary>
        /// Initializes a new instance of the <see cref="DownStreamApiHelper" /> class.
        /// </summary>
        /// <param name="downStreamApiConfig">The API configuration.</param>
        /// <param name="msalClientHelper">The MSALClientHelper helper instance.</param>
        /// <exception cref="System.ArgumentNullException">msalClientHelper</exception>
        public DownStreamApiHelper(DownStreamApiConfig downStreamApiConfig, MSALClientHelper msalClientHelper)
        {
            if (msalClientHelper is null)
            {
                throw new ArgumentNullException(nameof(msalClientHelper));
            }

            _downStreamApiConfig = downStreamApiConfig;
            _msalClient = msalClientHelper;
        }

        /// <summary>
        /// Sign in user using MSAL and obtain a token for your API
        /// </summary>
        public async Task SignInUserAsync()
        {
            await _msalClient.AcquireAccessTokenForUserAccountAsync(_downStreamApiConfig.ScopesArray);
        }
    }
}
